// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/divyatambat/FarmersBasket/internal/repository"
	mock "github.com/stretchr/testify/mock"
)

// ProductStorer is an autogenerated mock type for the ProductStorer type
type ProductStorer struct {
	mock.Mock
}

// GetProductByID provides a mock function with given fields: ctx, tx, productID
func (_m *ProductStorer) GetProductByID(ctx context.Context, tx repository.Transaction, productID int64) (repository.Product, error) {
	ret := _m.Called(ctx, tx, productID)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 repository.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, int64) (repository.Product, error)); ok {
		return rf(ctx, tx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, int64) repository.Product); ok {
		r0 = rf(ctx, tx, productID)
	} else {
		r0 = ret.Get(0).(repository.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.Transaction, int64) error); ok {
		r1 = rf(ctx, tx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProducts provides a mock function with given fields: ctx, tx
func (_m *ProductStorer) ListProducts(ctx context.Context, tx repository.Transaction) ([]repository.Product, error) {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for ListProducts")
	}

	var r0 []repository.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction) ([]repository.Product, error)); ok {
		return rf(ctx, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction) []repository.Product); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.Transaction) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductQuantity provides a mock function with given fields: ctx, tx, productsQuantityMap
func (_m *ProductStorer) UpdateProductQuantity(ctx context.Context, tx repository.Transaction, productsQuantityMap map[int64]int64) error {
	ret := _m.Called(ctx, tx, productsQuantityMap)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProductQuantity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Transaction, map[int64]int64) error); ok {
		r0 = rf(ctx, tx, productsQuantityMap)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductStorer creates a new instance of ProductStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductStorer {
	mock := &ProductStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
