// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/divyatambat/FarmersBasket/internal/repository"
	mock "github.com/stretchr/testify/mock"
)

// OrderStorer is an autogenerated mock type for the OrderStorer type
type OrderStorer struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *OrderStorer) CreateOrder(ctx context.Context, order repository.Order) (repository.Order, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 repository.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Order) (repository.Order, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.Order) repository.Order); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(repository.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByID provides a mock function with given fields: ctx, orderID
func (_m *OrderStorer) GetOrderByID(ctx context.Context, orderID int64) (repository.Order, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByID")
	}

	var r0 repository.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (repository.Order, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) repository.Order); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Get(0).(repository.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrders provides a mock function with given fields: ctx
func (_m *OrderStorer) ListOrders(ctx context.Context) ([]repository.Order, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListOrders")
	}

	var r0 []repository.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]repository.Order, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []repository.Order); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderStatus provides a mock function with given fields: ctx, orderID, status
func (_m *OrderStorer) UpdateOrderStatus(ctx context.Context, orderID int64, status string) error {
	ret := _m.Called(ctx, orderID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, orderID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderStorer creates a new instance of OrderStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderStorer {
	mock := &OrderStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
